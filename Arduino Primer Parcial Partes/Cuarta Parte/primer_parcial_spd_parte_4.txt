//DEFINE LOS LEDS DE LOS DISPLAYS
#define A 13
#define B 12
#define C 11
#define D 10
#define E 9
#define F 8
#define G 7

//DEFINE LOS PULSADORES
#define RESET 5
#define AUM 3
#define DISM 1

//DEFINE CADA DISPLAY
#define DECENA A4
#define UNIDAD A5

//DEFINE EL ESTADO APAGADO PARA LOS DISPLAYS
#define APAGADOS 0

//DEFINE EL TIEMPO QUE SE VA A MANTENER PRENDIDO UN DISPLAY
#define TIMEDISPLAYON 10

//DEFINE EL SWITCH
#define INTERRUPTOR 6

//DEFINE EL EL MOTOR
#define MOTOR 2

//DEFINO EL SENSOR
#define SENSOR A0

//DEFINO EL FOTO RESISTOR
#define RESISTOR A1

int lectura;

int estadoInterruptor;

//variables para el control de la temperatura
int lecturaSensor;
int temperatura;
int TEMPERATURAMINIMA = 60;
int TEMPERATURAMAXIMA = 90;

//El contador define qué número se va a mostrar en los displays
int contador = 0;

//variables para controlar los pulsadores
int aum = 1;
int aumPrevia = 1;
int dism = 1;
int dismPrevia = 1;
int reset = 1;
int resetPrevia = 1;
int estadoSwitchPrevia = 1;


void setup()
{
  //Se setean los pines de salida y entrada
  pinMode(RESET, INPUT_PULLUP);
  pinMode(AUM, INPUT_PULLUP);
  pinMode(DISM, INPUT_PULLUP);
  pinMode(INTERRUPTOR, INPUT_PULLUP);
  pinMode(DECENA, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  pinMode(MOTOR, OUTPUT);
  
  
  
  for (int i = G; i <= A; i++)
  {
    pinMode(i, OUTPUT);
  }
  
  //INICIALIZO LOS DISPLAYS EN ESTADO APAGADO
  prenderDisplay(APAGADOS);
    
  //SE INICIALIZA EL SERIAL
  Serial.begin(9600); 
}

void loop()
{
  
  lectura = analogRead(RESISTOR);
  int estadoInterruptor = digitalRead(INTERRUPTOR);
  Serial.println(lectura);
  
  
  if(lectura >= 200 && lectura <= 300)
  {
     //Lectura del sensor de temperatura
     lecturaSensor = analogRead(SENSOR); 
  }
  
  if (controlarMotor(lecturaSensor) && estadoInterruptor == 0) // Si el motor está encendido se encienden los displays y se habilita su funcionamiento
  { 
    int pulsador = verificarPulsadores();
    
    if (pulsador == RESET)
    {
      contador = 0;//Restablecer el contador si se presiona RESET
    }
    else if (!controlarInterruptor(estadoInterruptor))
    {
      //Si el interruptor cambio su estado , resetear el contador a 0
      interruptorApagado(pulsador);
    }
    else
    {
      interruptorEncendido(pulsador);
    }
    
    dibujarContador(contador);    
  }
  else 
  {
    prenderDisplay(APAGADOS);//Apagar los displays si el motor esta apagado
  }
  delay(25);
}

bool controlarInterruptor(int estadoInterruptor)
{
  bool prendido = false;
  
  if(estadoInterruptor == 0)
  {
     prendido = true;
  }

  if(estadoInterruptor == !estadoSwitchPrevia)
    {
      estadoSwitchPrevia = estadoInterruptor;
      contador = 0;// Reiniciar el contador si el interruptor cambió
    }
  return prendido;

}
bool controlarMotor(int lecturaSensor)
  {
    bool estadoDelMotor;
    temperatura = map(lecturaSensor, 20, 358, -40, 125);
    //Verificar si la temperatura está dentro del rango requerido
    if (temperatura >= TEMPERATURAMINIMA && temperatura <= TEMPERATURAMAXIMA)
    {
      digitalWrite(MOTOR, HIGH); // Enciende el motor
      estadoDelMotor = true;
    }
    else
    {
      digitalWrite(MOTOR, LOW); // Apaga el motor
      estadoDelMotor = false;
    }
    return estadoDelMotor;
  }
//Funcion que maneja los contadores sin numeros prim
void interruptorApagado(int pulsador)
{
  if (pulsador == AUM){
      //Incrementar el contador y reiniciar a 0 si supera a 99
        contador++;
        if (contador > 99)
          contador = 0;
      }
  else if (pulsador == DISM){
  //Decreentar el contador y reinicia a 99 si es negativo
    contador--;
    if (contador < 0)
      contador = 99;
  }
}
//Funcion qemana s ctadores n numeros primos
void interruptorEncendido(int pulsador)
{
  if(pulsador == AUM){
  //Incrementa el contador al encontrar numero primo
    contador += 1;
    for (contador; ;contador++)
    {
      if(esPrimo(contador))
      {
        Serial.println(contador);
        if(contador >=99)
        {
          contador = 0;//Reiniciar a 0 si llega al 99
        }
        break;
      }
    }
  }
  else if (pulsador == DISM){
  //Decrementa el contador al econtrar numeros primos
    contador -= 1;
    for (contador; contador > 1; contador -= 1)
    {
      if(esPrimo(contador))
      {
        Serial.println(contador);
        break;
      }
    }
    if(contador <= 1)
    {
      contador = 99;//Reinicia a 99 si es menor o igual a 1
    }
  }
}

//Funcion encargada de componer numeros en el display
void dibujarNumero(int numero)
{
  switch (numero)
  {
    case 0:
    ConfigurarDisplay(1, 1, 1, 1, 1, 1, 0);
    break;
    case 1:
    ConfigurarDisplay(0, 1, 1, 0, 0, 0, 0);
    break;
    case 2:
    ConfigurarDisplay(1, 1, 0, 1, 1, 0, 1);
    break;
    case 3:
    ConfigurarDisplay(1, 1, 1, 1, 0, 0, 1);
    break;
    case 4:
    ConfigurarDisplay(0, 1, 1, 0, 0, 1, 1);
    break;
    case 5:
    ConfigurarDisplay(1, 0, 1, 1, 0, 1, 1);
    break;
    case 6:
    ConfigurarDisplay(1, 0, 1, 1, 1, 1, 1);
    break;
    case 7:
    ConfigurarDisplay(1, 1, 1, 0, 0, 0, 0);
    break;
    case 8:
    ConfigurarDisplay(1, 1, 1, 1, 1, 1, 1);
    break;
    case 9:
    ConfigurarDisplay(1, 1, 1, 0, 0, 1, 1);
  }
}

void ConfigurarDisplay(int a, int b, int c, int d, int e, int f, int g)
{
  digitalWrite(A, a);
  digitalWrite(B, b);
  digitalWrite(C, c);
  digitalWrite(D, d);
  digitalWrite(E, e);
  digitalWrite(F, f);
  digitalWrite(G, g);
}

void prenderDisplay(int digito)
{
  if (digito == UNIDAD)
  {
    digitalWrite(UNIDAD, 0);
    digitalWrite(DECENA, 1);
    delay(TIMEDISPLAYON);
  }
  else if (digito == DECENA)
  {
    digitalWrite(UNIDAD, 1);
    digitalWrite(DECENA, 0);
    delay(TIMEDISPLAYON);
  }
  else
  {
    digitalWrite(UNIDAD, 1);
    digitalWrite(DECENA, 1);
  }
}

void dibujarContador(int contador)
{
  //APAGO LOS DISPLAYS PARA TENER CONTROL DE CADA UNO
  prenderDisplay(APAGADOS);
  //PRIMERO DIBUJO LAS DECENAS
  dibujarNumero((int)contador / 10);
  //PRENDO EL DISPLAY DE LAS DECENAS
  prenderDisplay(DECENA);
  //LOS VUELVO A APAGAR PARA YA NO TOCAR EL DISPLAY DE LAS DECENAS
  prenderDisplay(APAGADOS);
  //LUEGO DIBUJO LAS UNIDADES
  dibujarNumero(contador - 10 * ((int)contador / 10));
  //PRENDO EL DISPLAY DE LAS UNIDADES
  prenderDisplay(UNIDAD);
}

int verificarPulsadores()
{
  /*Esta funcion devuelve el boton que fue presionado o 0 en el caso de que ninguno haya sido presionado*/
  aum = digitalRead(AUM); // Al ser declarado input_pullup devuelve 0 SI SE PRESIONÓ, 1 SI NO SE PRESIONÓ
  dism = digitalRead(DISM);
  reset = digitalRead(RESET);
  // COMPRUEBO SI LOS PULSADORES ESTÁN SIN PRESIONAR
  if (aum == 1)
    aumPrevia = 1; //EL ESTADO ANTERIOR DEL PULSADOR ES SIN PRESIONAR
  if (dism == 1)
    dismPrevia = 1;
  if (reset == 1)
    resetPrevia = 1;
  // COMPRUEBO SI EL PULSADOR PRESIONADO ESTABA "SIN PRESIONAR"
  if (aum == 0 && aum != aumPrevia)
  {
    aumPrevia = 0; //EL ESTADO ANTERIOR DEL PULSADOR AHORA ES PRESIONADO
    return AUM;
  }
  if (dism == 0 && dism != dismPrevia)
  {
    dismPrevia = 0;
    return DISM;
  }
  if (reset == 0 && reset != resetPrevia)
  {
    resetPrevia = 0;
    return RESET;
  }
  return 0; //NO SE PRESIONÓ NINGÚN BOTÓN O SE MANTUVO PRESIONADO EL MISMO
}

bool esPrimo(int numero)
{
  /*Esta funcion devuelve TRUE si un numero es primo y FALSE si no lo es*/
  bool esPrimo = true;
  if (numero < 2)
  {
    esPrimo = false; // Los números negativos y 1 no son primos
  }

  for (int i = 2; i <= sqrt(numero); i++)
  {
    if (numero % i == 0)
    {
      esPrimo = false; // Si el número tambien es divisible por i, no es primo
      break;
    }
  }
  return esPrimo;
}

